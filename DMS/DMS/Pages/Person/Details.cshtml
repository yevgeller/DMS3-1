@page
@model DMS.Pages.Person.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Person</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Person.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Person.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Person.Is_Active)
        </dt>
        <dd class="col-sm-10">
            @(Model.Person.Is_Active ? "Yes" : "No")
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Person.Person_Type)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Person.Person_Type.Name)
        </dd>
    </dl>
</div>
<h3>Contact Info</h3>
<table class="table table-sm table-bordered">
    <thead>
        <tr>
            <th>
                Type
            </th>
            <th>Info</th>
            <th style="width:30px;"></th>
            <th style="width:30px;"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var c in Model.Contacts)
        {
            <tr>
                <td>@c.Contact_Type_Name</td>
                <td>@c.Value</td>
                <td>
                    <a asp-page="/Contact/Edit"
                       asp-route-id="@c.Contact_Id">
                        <i class="fas fa-pencil-alt"></i>
                    </a>
                </td>
                <td>
                    <a asp-page="/Contact/Delete"
                       asp-route-id="@c.Contact_Id">
                        <i class="fas fa-trash"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <a asp-page="./Edit" asp-route-id="@Model.Person.Person_Id">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>

<h3>Add new contact info</h3>

<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="container p-3 mb-2 bg-alert border">
        <div class="row ">
            <div class="col-sm">
                <div class="form-group">
                    <select id="contactTypes" asp-for="SelectedContactTypeId" class="form-control" asp-items="@Model.Contact_Types">
                        <option value="0">-- Choose New Contact Type --</option>
                    </select>
                </div>
            </div>
            <div class="col-sm">
                <input type="text" id="contactValue" class="form-control" placeholder="Enter new contact info" name="NewContactValue" value="@Model.NewContactValue" />
                <span asp-validation-for="NewContactValue" class="text-danger"></span>
                <div class="alert alert-danger d-none" id="invalidEmailFormatAlert" role="alert">
                    Email is not in a valid format
                </div>
                <div class="alert alert-danger d-none" id="invalidPhoneFormatAlert" role="alert">
                    Invalid format for a phone
                </div>
            </div>
            <div class="col-sm">
                <button class="btn btn-primary" type="submit" id="submitButton"
                        asp-route-id="@Model.Person.Person_Id"
                        asp-page-handler="AddNewContact">
                    <i class="fas fa-plus"></i>&nbsp;Add
                </button>
            </div>
        </div>       
    </div>
</form>


<script type="text/javascript">
    window.onload = (event) => {
        registerListeners();
    };

    function registerListeners() {
        let i = document.getElementById('contactValue');
        i.addEventListener('input', validateInput);
        let s = document.getElementById('contactTypes');
        s.addEventListener('change', validateInput);
    }

    function validateInput() {
        let i = document.getElementById('contactValue');
        let s = document.getElementById('contactTypes');
        let b = document.getElementById('submitButton');
        let selectedContactType = s.options[s.selectedIndex].text.toLowerCase();
        let checkingEmail = false;
        let checkingPhone = false;
        let result = false;
        if (selectedContactType.startsWith('email')) {
            result = validateEmail(i.value);
            checkingEmail = true;
            console.log('checking email');
        } else if (selectedContactType.startsWith('phone')) {
            result = validatePhone(i.value);
            checkingPhone = true;
            console.log('checking phone');
        }

        b.classList.remove('d-none');

        let phoneAlert = document.getElementById('invalidPhoneFormatAlert');
        let emailAlert = document.getElementById('invalidEmailFormatAlert');

        if (!phoneAlert.classList.contains('d-none')) {
            phoneAlert.classList.add('d-none');
        }

        if (!emailAlert.classList.contains('d-none')) {
            emailAlert.classList.add('d-none');
        }
        if (!result) {
            b.classList.add('d-none');

            if (checkingEmail) {
                emailAlert.classList.remove('d-none');
            }

            if (checkingPhone) {
                phoneAlert.classList.remove('d-none');
            }
        }
    }

    function validateEmail(email) {
        var regex = /^\S+@@\S+$/;
        return regex.test(email);
    }

    function validatePhone(phone) {
        return phone.match(/\d/g) ? phone.match(/\d/g).length === 10 : false;
    }
</script>