@page
@model DMS.Pages.Activity.Create2Model
@{
}

@*
    TODO: Fix time/date (a week back/forward)
        Add date of week
        Exclude weekends
        Add increments
          15 mins for time
          1 day for days
        Determine lower/upper bounds for date and time
        Form the Activity message based on selected buttons
        Figure out how to not allow ambiguous buttons
        (can't have full breakfast and no breakfast at the same time)
        Add ability to order groups
*@
<div>
    <div class="col"><i class="fas fa-bullhorn fa-5x"></i></div>
    <h1>@Model.Student.Name</h1>

    <h4>Record new activity</h4>
</div>
<span id="finalMessage"></span>
<div class="container">
    <div class="row">        
        <div class="col">
            <div class="row">
                <label class="col-form-label">Adjust Date:</label>
                <button class="btn btn-light mx-1 border" id="backAllDays"><i class="fas fa-fast-backward"></i></button>
                <button class="btn btn-light mx-1 border" id="backOneDay"><i class="fas fa-step-backward"></i></button>                
                <button class="btn btn-light mx-1 border" id="fwdOneDay"><i class="fas fa-step-forward"></i></button>
                <button class="btn btn-light mx-1 border" id="fwdAllDays"><i class="fas fa-fast-forward"></i></button>
                <button class="btn btn-light mx-1 border" id="dayReset"><i class="fas fa-history"></i></button>
                @*<input id="timeStamp" type="text" class="form-control" value="@Model.Activity_TimeStamp" asp-for="Activity_TimeStamp" style="width:200px;" />*@
                <input id="timeStamp" type="text" class="form-control" style="width:250px;" />
                <label class="col-form-label">Adjust Time:</label>
                <button class="btn btn-light mx-1 border" id="timeStart"><i class="fas fa-fast-backward"></i></button>
                <button class="btn btn-light mx-1 border" id="backTime"><i class="fas fa-step-backward"></i></button>
                <button class="btn btn-light mx-1 border" id="fwdTime"><i class="fas fa-step-forward"></i></button>
                <button class="btn btn-light mx-1 border" id="fwdEndOfDay"><i class="fas fa-fast-forward"></i></button>
                <button class="btn btn-light mx-1 border" id="timeReset"><i class="fas fa-history"></i></button>
            </div>
        </div>
    </div>
</div>

<div id="activitiesContainer">
    @foreach (string group in Model.Activity_Groups)
    {<div class="d-flex flex-wrap">
            @foreach (Models.Activity_Type at in Model.Activity_Types
            .Where(x => x.GroupingString == group)
            .OrderBy(x => x.SortOrder))
            {
                <button class="btn btn-primary p-2 m-3 js-hook-activity-selector"
                        id="activitySelector-@at.Activity_Type_Id"
                        data-attribute="@at.Activity_Type_Id">
                    @at.Name
                </button>
            }
        </div>
    }
</div>

<script type="text/javascript">
    let toSave = [];
    let timeStamp = "";
    let hourStart = 7;
    let hourEnd = 18;

    window.onload = (event) => {
        registerListeners();
        timeStamp = moment();
        refreshTimeStampDisplay();
    };

    function refreshTimeStampDisplay() {
        document.getElementById('timeStamp').value = timeStamp.format('ddd, MMM D h:mm A, YYYY');
    }

    function ensureTimeWithinWorkDay() {

        if (timeStamp.hour() < hourStart) {
            timeStamp.hour(hourStart);
            timeStamp.minute(0);
        } else if (timeStamp.hour() > hourEnd) {
            timeStamp.hour(hourEnd);
            timeStamp.minute(0);
        }
    }

    function registerListeners() {
        document.getElementById('activitiesContainer')
            .addEventListener('click', event => {
                let caller = event.target || event.srcElement;
                if (caller && caller.classList.contains('js-hook-activity-selector')) {
                    caller.classList.toggle('btn-primary');
                    caller.classList.toggle('btn-warning');
                    processActivityId(caller.dataset.attribute);
                }
                //debugger;
            });

        document.getElementById('backAllDays').addEventListener('click', event => {
            alert('backAllDays');
        });

        document.getElementById('backOneDay').addEventListener('click', event => {
            alert('backOneDay');

        });
        document.getElementById('fwdOneDay').addEventListener('click', event => {
            alert('fwdOneDay');

        });
        document.getElementById('fwdAllDays').addEventListener('click', event => {
            alert('fwdAllDays');

        });
        document.getElementById('dayReset').addEventListener('click', event => {
            debugger;
            document.getElementById('timeStamp').value = moment().format('M/D/YYYY');
        });
        document.getElementById('timeStart').addEventListener('click', event => {
            debugger;
            timeStamp.hour(hourStart);
            timeStamp.minute(0);
            refreshTimeStampDisplay();
        });
        document.getElementById('backTime').addEventListener('click', event => {
            timeStamp.minute(timeStamp.minute() - 15);
            ensureTimeWithinWorkDay();
            refreshTimeStampDisplay();
        });

        document.getElementById('fwdTime').addEventListener('click', event => {
            timeStamp.minute(timeStamp.minute() + 15);
            ensureTimeWithinWorkDay();
            refreshTimeStampDisplay();
        });

        document.getElementById('fwdEndOfDay').addEventListener('click', event => {
            timeStamp.hour(hourEnd);
            timeStamp.minute(0);
            refreshTimeStampDisplay();
        });
        document.getElementById('timeReset').addEventListener('click', event => {
            timeStamp = moment();
            ensureTimeWithinWorkDay();
            refreshTimeStampDisplay();
        });

    }

    function processActivityId(id) {
        debugger;
        let i = toSave.indexOf(id);
        if (i >= 0) {
            toSave.splice(i, 1);
        } else {
            toSave.push(id);
        }
        document.getElementById('finalMessage').textContent = toSave.join(', ');
    }
</script>
@*//let activityButtons = document.querySelectorAll(".js-hook-activity-selector");
        //if (activityButtons) {

        //    activityButtons.forEach((b) => {
        //        let c = b.dataset.attribute;
        //        b.addEventListener("click", (e) => {
        //            let caller = e.target || e.srcElement;
        //            if (caller) {
        //                let id = caller.id;

        //                caller.classList.toggle('btn-primary');
        //                caller.classList.toggle('btn-warning');

        //            }
        //        });
        //        //debugger;
        //    });
        //}
        //debugger;
        //let i = document.getElementById('contactValue');
        //i.addEventListener('input', validateInput);
        //let s = document.getElementById('contactTypes');
        //s.addEventListener('change', validateInput);


    //function toggleClass() {

    //    debugger;
    //    let caller = e.target || e.srcElement;
    //    console.log(caller);
    //}*@
